import asyncio
import base64
import io
import json
import logging
import lmstudio as lm
import docx
import ollama
from kafka import KafkaProducer, KafkaConsumer
from Service.CVProcessor import extract_name
from Service.CVProcessor.CVProcessorInfo import CVDetailExtractor
from Service.Kafka import KafkaClient
from Service.Xu_ly.Xu_ly_file import convert_pdf_to_txt
from Service.CVProcessor.extract_github import GitHubExtractor


logging.basicConfig(level=logging.DEBUG)

KAFKA_BROKER = "localhost:29092"
TOPIC_CV_DATA = "cv-data"
TOPIC_CV_FILE = "cv-file"


producer = KafkaProducer(
    bootstrap_servers=KAFKA_BROKER,
    max_request_size=10485760,
    value_serializer=lambda v: json.dumps(v).encode('utf-8')
)

class CVAnalyzer:
    @staticmethod
    def extract_text(file_content: bytes, filename: str) -> str:
        if filename.endswith(".pdf"):
            return convert_pdf_to_txt(file_content)
        elif filename.endswith(".docx"):
            doc = docx.Document(io.BytesIO(file_content))
            return "\n".join([p.text for p in doc.paragraphs]).strip()
        else:
            return file_content.decode("utf-8", errors="ignore").strip()

    @staticmethod
    def analyze(content: str, filename: str) -> dict:
        prompt = f"""
            Vui l√≤ng ph√¢n t√≠ch CV sau v√† tr√≠ch xu·∫•t d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:  
            CV:
            {content}
            {{
                "name": "H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa ·ª©ng vi√™n.",
                "phone": "S·ªë ƒëi·ªán tho·∫°i 10 ho·∫∑c 11 ch·ªØ s·ªë.",
                "email": "ƒê·ªãa ch·ªâ email.",
                "address": "ƒê·ªãa ch·ªâ nh√† ho·∫∑c n∆°i l√†m vi·ªác n·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ c·ª• th·ªÉ th√¨ th√™m v√†o l√† (Vi·ªát Nam).",
                "github": "ƒê∆∞·ªùng d·∫´n GitHub c√° nh√¢n n·∫øu c√≥, n·∫øu kh√¥ng c√≥ th√¨ tr·∫£ v·ªÅ 'N/A'.",
                "hoc_van": "T√¨m v·∫£ tr·∫£ v·ªÅ d·ªØ li·ªáu cho tr∆∞·ªùng n√†y g·ªìm t√™n tr∆∞·ªùng h·ªçc ho·∫∑c c∆° s·ªü gi√°o d·ª•c v√† ƒëi·ªÉm GPA g·ªôp t·∫•t c·∫£ d·ªØ li·ªáu t√¨m ƒë∆∞·ª£c th√†nh m·ªôt chu·ªói (T√™n g·ªçi c·ªßa c∆° s·ªü gi√°o d·ª•c c√≥ trong CV (b·∫Øt ƒë·∫ßu b·∫±ng 'ƒê·∫°i h·ªçc', 'Trung t√¢m', 'Cao ƒë·∫≥ng' ho·∫∑c ch·ª©a 'University'), ƒêi·ªÉm GPA (t√¨m v√† tr·∫£ v·ªÅ ƒëi·ªÉm GPA n·∫øu kh√¥ng c√≥ th√¨ ch·ªâ tr·∫£ v·ªÅ t√™n c∆° s·ªü gi√°o d·ª•c.))",
                "projects": [
                    {{
                        "ten_du_an": "T√™n ƒë·∫ßy ƒë·ªß c·ªßa d·ª± √°n (GI·ªÆ NGUY√äN 100%, KH√îNG S·ª¨A K√ù T·ª∞, VI·∫æT ƒê√öNG NH∆Ø TRONG VƒÇN B·∫¢N ƒê∆ØA RA). N·∫øu c√≥ l·ªói sai, tr·∫£ v·ªÅ l·ªói 'T√™n b·ªã thay ƒë·ªïi'.",
                        "mo_ta": "M√¥ t·∫£ v·ªÅ d·ª± √°n.",
                        "ngay_bat_dau": "Ng√†y d·ª± √°n b·∫Øt ƒë·∫ßu (ƒë·ªãnh d·∫°ng MM/YYYY ho·∫∑c DD/MM/YYYY).",
                        "ngay_ket_thuc": "Ng√†y d·ª± √°n k·∫øt th√∫c th∆∞·ªùng n·∫±m ti·∫øp n·ªëi ph√≠a sau ng√†y b·∫Øt ƒë·∫ßu",
                        "team_size": "S·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia (n·∫øu c√≥ 'd·ª± √°n c√° nh√¢n' th√¨ team_size = 1).",
                        "role": "Vai tr√≤ trong d·ª± √°n.",
                    }}
                ]

            }}

        """
        try:
            model = lm.llm("gemma-3-4b-it-qat")
            response = model.respond(prompt)
            if hasattr(response, "text"):
                content_text = response.text.strip()
            elif hasattr(response, "content"):
                content_text = response.content.strip()
            else:
                raise ValueError("Response kh√¥ng ph·∫£i ki·ªÉu text, ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng tr·∫£ v·ªÅ!")

            # Ti·∫øp t·ª•c x·ª≠ l√Ω JSON
            if content_text.startswith("```json"):
                content_text = content_text[7:].strip()
            if content_text.endswith("```"):
                content_text = content_text[:-3].strip()

            parsed_data = json.loads(content_text) if content_text.startswith("{") else {}
            parsed_data["ten_cv"] = filename
            github_links = GitHubExtractor.extract_github_links(content)
            parsed_data["github_link"] = github_links
            hoc_van = parsed_data.pop("hoc_van", "kh√¥ng c√≥ th√¥ng tin")
            return parsed_data, hoc_van
        except Exception as e:
            logging.error(f"Error when calling LM Studio Model: {str(e)}")
            return {"error": str(e)}, "kh√¥ng c√≥ th√¥ng tin"

class CVProcessor:
    def __init__(self, kafka_client: KafkaClient):
        self.kafka_client = kafka_client
        self.queue = asyncio.Queue()
        self.processing = False
        asyncio.create_task(self.worker())

    async def worker(self):
        while True:
            file_content, filename = await self.queue.get()
            try:
                await self.process_cv(file_content, filename)
            except Exception as e:
                logging.error(f"L·ªói khi x·ª≠ l√Ω file")
            finally:
                self.queue.task_done()


    async def add_task(self, file_content: bytes, filename: str):
        await self.queue.put((file_content, filename))

    async def process_cv(self, file_content: bytes, filename: str):
        text_content = CVAnalyzer.extract_text(file_content, filename)
        if not text_content:
            logging.error(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ {filename}")
            return {"error": f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung t·ª´ {filename}"}

        # extracted_data = CVAnalyzer.analyze(text_content, filename)
        # Nh·∫≠n v·ªÅ tuple (extracted_data, hoc_van)
        extracted_data, hoc_van = CVAnalyzer.analyze(text_content, filename)
        self.kafka_client.send("cv-data", extracted_data)

        # üõ† L·∫•y s·ªë ƒëi·ªán tho·∫°i t·ª´ k·∫øt qu·∫£ JSON
        phone_number = extracted_data.get("phone", "N/A")  # M·∫∑c ƒë·ªãnh "N/A" n·∫øu kh√¥ng c√≥

        # detailed_info = CVDetailExtractor.extract_details(text_content, phone_number)
        # self.kafka_client.send("info-ungvien", detailed_info)
        # G·ª≠i th√¥ng tin chi ti·∫øt k√®m hoc_van
        detailed_info = CVDetailExtractor.extract_details(text_content, phone_number, hoc_van)
        self.kafka_client.send("info-ungvien", detailed_info)

        encoded_file = base64.b64encode(file_content).decode("utf-8")
        file_message = {"filename": filename, "file_content": encoded_file}
        self.kafka_client.send("cv-file", file_message)
        logging.info(f"File {filename} ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v√† g·ª≠i l√™n Kafka")
        return {"filename": filename, "status": "processed"}