import re
from typing import List

import requests


class GitHubExtractor:
    GITHUB_BASE = "https://github.com/"

    @staticmethod
    def extract_github_links(content: str):
        """
        Tr√≠ch xu·∫•t v√† ki·ªÉm tra link GitHub, th·ª≠ t·ª´ng ch·ªØ n·∫øu repo kh√¥ng h·ª£p l·ªá.
        """
        # ‚úÖ Gi·ªØ nguy√™n d·∫•u "-" khi n·ªëi l·∫°i link b·ªã xu·ªëng d√≤ng
        content = re.sub(r'(https?:\/\/github\.com\/[^\s]+)-\s+([^\s]+)', r'\1-\2', content)
        content = re.sub(r'(https?:\/\/github\.com\/[^\s]+)\s+([^\s]+)', r'\1\2', content)

        # üîç T√¨m c√°c link GitHub h·ª£p l·ªá
        pattern = r'https?:\/\/github\.com\/([a-zA-Z0-9-]+)\/([a-zA-Z0-9-_.]+)'
        matches = re.findall(pattern, content)

        github_links = [f"https://github.com/{user}/{repo}" for user, repo in matches]
        unique_links = list(dict.fromkeys(github_links))

        # ‚úÖ Ki·ªÉm tra repo b·∫±ng c√°ch x√≥a t·ª´ng ch·ªØ c√°i n·∫øu kh√¥ng h·ª£p l·ªá
        valid_links = [GitHubExtractor.verify_github_link(link) for link in unique_links]
        return [link for link in valid_links if link]

    @staticmethod
    def verify_github_link(base_link: str) -> str:
        """
        Ki·ªÉm tra xem link GitHub c√≥ h·ª£p l·ªá kh√¥ng, th·ª≠ t·ª´ng ch·ªØ n·∫øu repo kh√¥ng h·ª£p l·ªá.
        """
        match = re.match(r'https://github.com/([a-zA-Z0-9-]+)/([a-zA-Z0-9-_.]+)', base_link)
        if not match:
            return ""

        user, repo = match.groups()

        if not repo:
            return ""


        for i in range(len(repo), 0, -1):
            candidate_repo = repo[:i]
            full_link = f"https://github.com/{user}/{candidate_repo}"
            if GitHubExtractor.is_valid_github_url(full_link):
                return full_link

        return ""

    @staticmethod
    def is_valid_github_url(url: str) -> bool:
        """
        G·ª≠i request HTTP ki·ªÉm tra xem link GitHub c√≥ h·ª£p l·ªá kh√¥ng.
        """
        try:
            response = requests.get(url, timeout=5)
            return response.status_code == 200
        except requests.RequestException:
            return False